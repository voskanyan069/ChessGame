// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ChessServer.proto

#include "ChessServer.pb.h"
#include "ChessServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Proto {

static const char* ChessServer_method_names[] = {
  "/Proto.ChessServer/ConnectToServer",
};

std::unique_ptr< ChessServer::Stub> ChessServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChessServer::Stub> stub(new ChessServer::Stub(channel));
  return stub;
}

ChessServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ConnectToServer_(ChessServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChessServer::Stub::ConnectToServer(::grpc::ClientContext* context, const ::Proto::Empty& request, ::Proto::ActionResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConnectToServer_, context, request, response);
}

void ChessServer::Stub::experimental_async::ConnectToServer(::grpc::ClientContext* context, const ::Proto::Empty* request, ::Proto::ActionResult* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectToServer_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Proto::ActionResult>* ChessServer::Stub::AsyncConnectToServerRaw(::grpc::ClientContext* context, const ::Proto::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Proto::ActionResult>::Create(channel_.get(), cq, rpcmethod_ConnectToServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Proto::ActionResult>* ChessServer::Stub::PrepareAsyncConnectToServerRaw(::grpc::ClientContext* context, const ::Proto::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Proto::ActionResult>::Create(channel_.get(), cq, rpcmethod_ConnectToServer_, context, request, false);
}

ChessServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChessServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChessServer::Service, ::Proto::Empty, ::Proto::ActionResult>(
          std::mem_fn(&ChessServer::Service::ConnectToServer), this)));
}

ChessServer::Service::~Service() {
}

::grpc::Status ChessServer::Service::ConnectToServer(::grpc::ServerContext* context, const ::Proto::Empty* request, ::Proto::ActionResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Proto

