// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChessServerTypes.proto

#ifndef PROTOBUF_INCLUDED_ChessServerTypes_2eproto
#define PROTOBUF_INCLUDED_ChessServerTypes_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ChessServerTypes_2eproto 

namespace protobuf_ChessServerTypes_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ChessServerTypes_2eproto
namespace Proto {
class Bool;
class BoolDefaultTypeInternal;
extern BoolDefaultTypeInternal _Bool_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class LastMoveInfo;
class LastMoveInfoDefaultTypeInternal;
extern LastMoveInfoDefaultTypeInternal _LastMoveInfo_default_instance_;
class MoveRequest;
class MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ReadyRequest;
class ReadyRequestDefaultTypeInternal;
extern ReadyRequestDefaultTypeInternal _ReadyRequest_default_instance_;
class RoomSettings;
class RoomSettingsDefaultTypeInternal;
extern RoomSettingsDefaultTypeInternal _RoomSettings_default_instance_;
class RoomWithUsername;
class RoomWithUsernameDefaultTypeInternal;
extern RoomWithUsernameDefaultTypeInternal _RoomWithUsername_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
}  // namespace Proto
namespace google {
namespace protobuf {
template<> ::Proto::Bool* Arena::CreateMaybeMessage<::Proto::Bool>(Arena*);
template<> ::Proto::Empty* Arena::CreateMaybeMessage<::Proto::Empty>(Arena*);
template<> ::Proto::LastMoveInfo* Arena::CreateMaybeMessage<::Proto::LastMoveInfo>(Arena*);
template<> ::Proto::MoveRequest* Arena::CreateMaybeMessage<::Proto::MoveRequest>(Arena*);
template<> ::Proto::Position* Arena::CreateMaybeMessage<::Proto::Position>(Arena*);
template<> ::Proto::ReadyRequest* Arena::CreateMaybeMessage<::Proto::ReadyRequest>(Arena*);
template<> ::Proto::RoomSettings* Arena::CreateMaybeMessage<::Proto::RoomSettings>(Arena*);
template<> ::Proto::RoomWithUsername* Arena::CreateMaybeMessage<::Proto::RoomWithUsername>(Arena*);
template<> ::Proto::String* Arena::CreateMaybeMessage<::Proto::String>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Proto {

enum PlayerType {
  OWNER = 0,
  GUEST = 1,
  PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PlayerType_IsValid(int value);
const PlayerType PlayerType_MIN = OWNER;
const PlayerType PlayerType_MAX = GUEST;
const int PlayerType_ARRAYSIZE = PlayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerType_descriptor();
inline const ::std::string& PlayerType_Name(PlayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerType_descriptor(), value);
}
inline bool PlayerType_Parse(
    const ::std::string& name, PlayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerType>(
    PlayerType_descriptor(), name, value);
}
// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Proto.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Bool) */ {
 public:
  Bool();
  virtual ~Bool();

  Bool(const Bool& from);

  inline Bool& operator=(const Bool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bool(Bool&& from) noexcept
    : Bool() {
    *this = ::std::move(from);
  }

  inline Bool& operator=(Bool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bool* internal_default_instance() {
    return reinterpret_cast<const Bool*>(
               &_Bool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Bool* other);
  friend void swap(Bool& a, Bool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bool* New() const final {
    return CreateMaybeMessage<Bool>(NULL);
  }

  Bool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Bool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Bool& from);
  void MergeFrom(const Bool& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:Proto.Bool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.String) */ {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(String&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(String* other);
  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline String* New() const final {
    return CreateMaybeMessage<String>(NULL);
  }

  String* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<String>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(String* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Proto.String)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(NULL);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.RoomSettings) */ {
 public:
  RoomSettings();
  virtual ~RoomSettings();

  RoomSettings(const RoomSettings& from);

  inline RoomSettings& operator=(const RoomSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomSettings(RoomSettings&& from) noexcept
    : RoomSettings() {
    *this = ::std::move(from);
  }

  inline RoomSettings& operator=(RoomSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomSettings* internal_default_instance() {
    return reinterpret_cast<const RoomSettings*>(
               &_RoomSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RoomSettings* other);
  friend void swap(RoomSettings& a, RoomSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomSettings* New() const final {
    return CreateMaybeMessage<RoomSettings>(NULL);
  }

  RoomSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomSettings& from);
  void MergeFrom(const RoomSettings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Proto.RoomSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomWithUsername : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.RoomWithUsername) */ {
 public:
  RoomWithUsername();
  virtual ~RoomWithUsername();

  RoomWithUsername(const RoomWithUsername& from);

  inline RoomWithUsername& operator=(const RoomWithUsername& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomWithUsername(RoomWithUsername&& from) noexcept
    : RoomWithUsername() {
    *this = ::std::move(from);
  }

  inline RoomWithUsername& operator=(RoomWithUsername&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomWithUsername& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomWithUsername* internal_default_instance() {
    return reinterpret_cast<const RoomWithUsername*>(
               &_RoomWithUsername_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RoomWithUsername* other);
  friend void swap(RoomWithUsername& a, RoomWithUsername& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomWithUsername* New() const final {
    return CreateMaybeMessage<RoomWithUsername>(NULL);
  }

  RoomWithUsername* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomWithUsername>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomWithUsername& from);
  void MergeFrom(const RoomWithUsername& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomWithUsername* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // .Proto.RoomSettings room = 1;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 1;
  private:
  const ::Proto::RoomSettings& _internal_room() const;
  public:
  const ::Proto::RoomSettings& room() const;
  ::Proto::RoomSettings* release_room();
  ::Proto::RoomSettings* mutable_room();
  void set_allocated_room(::Proto::RoomSettings* room);

  // @@protoc_insertion_point(class_scope:Proto.RoomWithUsername)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::Proto::RoomSettings* room_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReadyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.ReadyRequest) */ {
 public:
  ReadyRequest();
  virtual ~ReadyRequest();

  ReadyRequest(const ReadyRequest& from);

  inline ReadyRequest& operator=(const ReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadyRequest(ReadyRequest&& from) noexcept
    : ReadyRequest() {
    *this = ::std::move(from);
  }

  inline ReadyRequest& operator=(ReadyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadyRequest* internal_default_instance() {
    return reinterpret_cast<const ReadyRequest*>(
               &_ReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ReadyRequest* other);
  friend void swap(ReadyRequest& a, ReadyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadyRequest* New() const final {
    return CreateMaybeMessage<ReadyRequest>(NULL);
  }

  ReadyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadyRequest& from);
  void MergeFrom(const ReadyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Proto.RoomSettings room = 1;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 1;
  private:
  const ::Proto::RoomSettings& _internal_room() const;
  public:
  const ::Proto::RoomSettings& room() const;
  ::Proto::RoomSettings* release_room();
  ::Proto::RoomSettings* mutable_room();
  void set_allocated_room(::Proto::RoomSettings* room);

  // .Proto.PlayerType playertype = 2;
  void clear_playertype();
  static const int kPlayertypeFieldNumber = 2;
  ::Proto::PlayerType playertype() const;
  void set_playertype(::Proto::PlayerType value);

  // bool isready = 3;
  void clear_isready();
  static const int kIsreadyFieldNumber = 3;
  bool isready() const;
  void set_isready(bool value);

  // @@protoc_insertion_point(class_scope:Proto.ReadyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::RoomSettings* room_;
  int playertype_;
  bool isready_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.MoveRequest) */ {
 public:
  MoveRequest();
  virtual ~MoveRequest();

  MoveRequest(const MoveRequest& from);

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MoveRequest* other);
  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveRequest* New() const final {
    return CreateMaybeMessage<MoveRequest>(NULL);
  }

  MoveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveRequest& from);
  void MergeFrom(const MoveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Proto.RoomSettings room = 1;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 1;
  private:
  const ::Proto::RoomSettings& _internal_room() const;
  public:
  const ::Proto::RoomSettings& room() const;
  ::Proto::RoomSettings* release_room();
  ::Proto::RoomSettings* mutable_room();
  void set_allocated_room(::Proto::RoomSettings* room);

  // .Proto.Position oldPosition = 2;
  bool has_oldposition() const;
  void clear_oldposition();
  static const int kOldPositionFieldNumber = 2;
  private:
  const ::Proto::Position& _internal_oldposition() const;
  public:
  const ::Proto::Position& oldposition() const;
  ::Proto::Position* release_oldposition();
  ::Proto::Position* mutable_oldposition();
  void set_allocated_oldposition(::Proto::Position* oldposition);

  // .Proto.Position newPosition = 3;
  bool has_newposition() const;
  void clear_newposition();
  static const int kNewPositionFieldNumber = 3;
  private:
  const ::Proto::Position& _internal_newposition() const;
  public:
  const ::Proto::Position& newposition() const;
  ::Proto::Position* release_newposition();
  ::Proto::Position* mutable_newposition();
  void set_allocated_newposition(::Proto::Position* newposition);

  // @@protoc_insertion_point(class_scope:Proto.MoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::RoomSettings* room_;
  ::Proto::Position* oldposition_;
  ::Proto::Position* newposition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LastMoveInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.LastMoveInfo) */ {
 public:
  LastMoveInfo();
  virtual ~LastMoveInfo();

  LastMoveInfo(const LastMoveInfo& from);

  inline LastMoveInfo& operator=(const LastMoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastMoveInfo(LastMoveInfo&& from) noexcept
    : LastMoveInfo() {
    *this = ::std::move(from);
  }

  inline LastMoveInfo& operator=(LastMoveInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LastMoveInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastMoveInfo* internal_default_instance() {
    return reinterpret_cast<const LastMoveInfo*>(
               &_LastMoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LastMoveInfo* other);
  friend void swap(LastMoveInfo& a, LastMoveInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastMoveInfo* New() const final {
    return CreateMaybeMessage<LastMoveInfo>(NULL);
  }

  LastMoveInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LastMoveInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LastMoveInfo& from);
  void MergeFrom(const LastMoveInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastMoveInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Proto.Position oldPosition = 1;
  bool has_oldposition() const;
  void clear_oldposition();
  static const int kOldPositionFieldNumber = 1;
  private:
  const ::Proto::Position& _internal_oldposition() const;
  public:
  const ::Proto::Position& oldposition() const;
  ::Proto::Position* release_oldposition();
  ::Proto::Position* mutable_oldposition();
  void set_allocated_oldposition(::Proto::Position* oldposition);

  // .Proto.Position newPosition = 2;
  bool has_newposition() const;
  void clear_newposition();
  static const int kNewPositionFieldNumber = 2;
  private:
  const ::Proto::Position& _internal_newposition() const;
  public:
  const ::Proto::Position& newposition() const;
  ::Proto::Position* release_newposition();
  ::Proto::Position* mutable_newposition();
  void set_allocated_newposition(::Proto::Position* newposition);

  // @@protoc_insertion_point(class_scope:Proto.LastMoveInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Proto::Position* oldposition_;
  ::Proto::Position* newposition_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ChessServerTypes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Bool

// bool value = 1;
inline void Bool::clear_value() {
  value_ = false;
}
inline bool Bool::value() const {
  // @@protoc_insertion_point(field_get:Proto.Bool.value)
  return value_;
}
inline void Bool::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Proto.Bool.value)
}

// -------------------------------------------------------------------

// String

// string value = 1;
inline void String::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& String::value() const {
  // @@protoc_insertion_point(field_get:Proto.String.value)
  return value_.GetNoArena();
}
inline void String::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.String.value)
}
#if LANG_CXX11
inline void String::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.String.value)
}
#endif
inline void String::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.String.value)
}
inline void String::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.String.value)
}
inline ::std::string* String::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Proto.String.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* String::release_value() {
  // @@protoc_insertion_point(field_release:Proto.String.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void String::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Proto.String.value)
}

// -------------------------------------------------------------------

// Position

// int32 x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:Proto.Position.x)
  return x_;
}
inline void Position::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.Position.x)
}

// int32 y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:Proto.Position.y)
  return y_;
}
inline void Position::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.Position.y)
}

// -------------------------------------------------------------------

// RoomSettings

// string name = 1;
inline void RoomSettings::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomSettings::name() const {
  // @@protoc_insertion_point(field_get:Proto.RoomSettings.name)
  return name_.GetNoArena();
}
inline void RoomSettings::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RoomSettings.name)
}
#if LANG_CXX11
inline void RoomSettings::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RoomSettings.name)
}
#endif
inline void RoomSettings::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RoomSettings.name)
}
inline void RoomSettings::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RoomSettings.name)
}
inline ::std::string* RoomSettings::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RoomSettings.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomSettings::release_name() {
  // @@protoc_insertion_point(field_release:Proto.RoomSettings.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomSettings::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.RoomSettings.name)
}

// string password = 2;
inline void RoomSettings::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomSettings::password() const {
  // @@protoc_insertion_point(field_get:Proto.RoomSettings.password)
  return password_.GetNoArena();
}
inline void RoomSettings::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RoomSettings.password)
}
#if LANG_CXX11
inline void RoomSettings::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RoomSettings.password)
}
#endif
inline void RoomSettings::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RoomSettings.password)
}
inline void RoomSettings::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RoomSettings.password)
}
inline ::std::string* RoomSettings::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RoomSettings.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomSettings::release_password() {
  // @@protoc_insertion_point(field_release:Proto.RoomSettings.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomSettings::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Proto.RoomSettings.password)
}

// -------------------------------------------------------------------

// RoomWithUsername

// .Proto.RoomSettings room = 1;
inline bool RoomWithUsername::has_room() const {
  return this != internal_default_instance() && room_ != NULL;
}
inline void RoomWithUsername::clear_room() {
  if (GetArenaNoVirtual() == NULL && room_ != NULL) {
    delete room_;
  }
  room_ = NULL;
}
inline const ::Proto::RoomSettings& RoomWithUsername::_internal_room() const {
  return *room_;
}
inline const ::Proto::RoomSettings& RoomWithUsername::room() const {
  const ::Proto::RoomSettings* p = room_;
  // @@protoc_insertion_point(field_get:Proto.RoomWithUsername.room)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::RoomSettings*>(
      &::Proto::_RoomSettings_default_instance_);
}
inline ::Proto::RoomSettings* RoomWithUsername::release_room() {
  // @@protoc_insertion_point(field_release:Proto.RoomWithUsername.room)
  
  ::Proto::RoomSettings* temp = room_;
  room_ = NULL;
  return temp;
}
inline ::Proto::RoomSettings* RoomWithUsername::mutable_room() {
  
  if (room_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::RoomSettings>(GetArenaNoVirtual());
    room_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.RoomWithUsername.room)
  return room_;
}
inline void RoomWithUsername::set_allocated_room(::Proto::RoomSettings* room) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete room_;
  }
  if (room) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Proto.RoomWithUsername.room)
}

// string username = 2;
inline void RoomWithUsername::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomWithUsername::username() const {
  // @@protoc_insertion_point(field_get:Proto.RoomWithUsername.username)
  return username_.GetNoArena();
}
inline void RoomWithUsername::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.RoomWithUsername.username)
}
#if LANG_CXX11
inline void RoomWithUsername::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.RoomWithUsername.username)
}
#endif
inline void RoomWithUsername::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.RoomWithUsername.username)
}
inline void RoomWithUsername::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.RoomWithUsername.username)
}
inline ::std::string* RoomWithUsername::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:Proto.RoomWithUsername.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomWithUsername::release_username() {
  // @@protoc_insertion_point(field_release:Proto.RoomWithUsername.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomWithUsername::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:Proto.RoomWithUsername.username)
}

// -------------------------------------------------------------------

// ReadyRequest

// .Proto.RoomSettings room = 1;
inline bool ReadyRequest::has_room() const {
  return this != internal_default_instance() && room_ != NULL;
}
inline void ReadyRequest::clear_room() {
  if (GetArenaNoVirtual() == NULL && room_ != NULL) {
    delete room_;
  }
  room_ = NULL;
}
inline const ::Proto::RoomSettings& ReadyRequest::_internal_room() const {
  return *room_;
}
inline const ::Proto::RoomSettings& ReadyRequest::room() const {
  const ::Proto::RoomSettings* p = room_;
  // @@protoc_insertion_point(field_get:Proto.ReadyRequest.room)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::RoomSettings*>(
      &::Proto::_RoomSettings_default_instance_);
}
inline ::Proto::RoomSettings* ReadyRequest::release_room() {
  // @@protoc_insertion_point(field_release:Proto.ReadyRequest.room)
  
  ::Proto::RoomSettings* temp = room_;
  room_ = NULL;
  return temp;
}
inline ::Proto::RoomSettings* ReadyRequest::mutable_room() {
  
  if (room_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::RoomSettings>(GetArenaNoVirtual());
    room_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.ReadyRequest.room)
  return room_;
}
inline void ReadyRequest::set_allocated_room(::Proto::RoomSettings* room) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete room_;
  }
  if (room) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Proto.ReadyRequest.room)
}

// .Proto.PlayerType playertype = 2;
inline void ReadyRequest::clear_playertype() {
  playertype_ = 0;
}
inline ::Proto::PlayerType ReadyRequest::playertype() const {
  // @@protoc_insertion_point(field_get:Proto.ReadyRequest.playertype)
  return static_cast< ::Proto::PlayerType >(playertype_);
}
inline void ReadyRequest::set_playertype(::Proto::PlayerType value) {
  
  playertype_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReadyRequest.playertype)
}

// bool isready = 3;
inline void ReadyRequest::clear_isready() {
  isready_ = false;
}
inline bool ReadyRequest::isready() const {
  // @@protoc_insertion_point(field_get:Proto.ReadyRequest.isready)
  return isready_;
}
inline void ReadyRequest::set_isready(bool value) {
  
  isready_ = value;
  // @@protoc_insertion_point(field_set:Proto.ReadyRequest.isready)
}

// -------------------------------------------------------------------

// MoveRequest

// .Proto.RoomSettings room = 1;
inline bool MoveRequest::has_room() const {
  return this != internal_default_instance() && room_ != NULL;
}
inline void MoveRequest::clear_room() {
  if (GetArenaNoVirtual() == NULL && room_ != NULL) {
    delete room_;
  }
  room_ = NULL;
}
inline const ::Proto::RoomSettings& MoveRequest::_internal_room() const {
  return *room_;
}
inline const ::Proto::RoomSettings& MoveRequest::room() const {
  const ::Proto::RoomSettings* p = room_;
  // @@protoc_insertion_point(field_get:Proto.MoveRequest.room)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::RoomSettings*>(
      &::Proto::_RoomSettings_default_instance_);
}
inline ::Proto::RoomSettings* MoveRequest::release_room() {
  // @@protoc_insertion_point(field_release:Proto.MoveRequest.room)
  
  ::Proto::RoomSettings* temp = room_;
  room_ = NULL;
  return temp;
}
inline ::Proto::RoomSettings* MoveRequest::mutable_room() {
  
  if (room_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::RoomSettings>(GetArenaNoVirtual());
    room_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MoveRequest.room)
  return room_;
}
inline void MoveRequest::set_allocated_room(::Proto::RoomSettings* room) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete room_;
  }
  if (room) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Proto.MoveRequest.room)
}

// .Proto.Position oldPosition = 2;
inline bool MoveRequest::has_oldposition() const {
  return this != internal_default_instance() && oldposition_ != NULL;
}
inline void MoveRequest::clear_oldposition() {
  if (GetArenaNoVirtual() == NULL && oldposition_ != NULL) {
    delete oldposition_;
  }
  oldposition_ = NULL;
}
inline const ::Proto::Position& MoveRequest::_internal_oldposition() const {
  return *oldposition_;
}
inline const ::Proto::Position& MoveRequest::oldposition() const {
  const ::Proto::Position* p = oldposition_;
  // @@protoc_insertion_point(field_get:Proto.MoveRequest.oldPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Position*>(
      &::Proto::_Position_default_instance_);
}
inline ::Proto::Position* MoveRequest::release_oldposition() {
  // @@protoc_insertion_point(field_release:Proto.MoveRequest.oldPosition)
  
  ::Proto::Position* temp = oldposition_;
  oldposition_ = NULL;
  return temp;
}
inline ::Proto::Position* MoveRequest::mutable_oldposition() {
  
  if (oldposition_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::Position>(GetArenaNoVirtual());
    oldposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MoveRequest.oldPosition)
  return oldposition_;
}
inline void MoveRequest::set_allocated_oldposition(::Proto::Position* oldposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete oldposition_;
  }
  if (oldposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oldposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oldposition, submessage_arena);
    }
    
  } else {
    
  }
  oldposition_ = oldposition;
  // @@protoc_insertion_point(field_set_allocated:Proto.MoveRequest.oldPosition)
}

// .Proto.Position newPosition = 3;
inline bool MoveRequest::has_newposition() const {
  return this != internal_default_instance() && newposition_ != NULL;
}
inline void MoveRequest::clear_newposition() {
  if (GetArenaNoVirtual() == NULL && newposition_ != NULL) {
    delete newposition_;
  }
  newposition_ = NULL;
}
inline const ::Proto::Position& MoveRequest::_internal_newposition() const {
  return *newposition_;
}
inline const ::Proto::Position& MoveRequest::newposition() const {
  const ::Proto::Position* p = newposition_;
  // @@protoc_insertion_point(field_get:Proto.MoveRequest.newPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Position*>(
      &::Proto::_Position_default_instance_);
}
inline ::Proto::Position* MoveRequest::release_newposition() {
  // @@protoc_insertion_point(field_release:Proto.MoveRequest.newPosition)
  
  ::Proto::Position* temp = newposition_;
  newposition_ = NULL;
  return temp;
}
inline ::Proto::Position* MoveRequest::mutable_newposition() {
  
  if (newposition_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::Position>(GetArenaNoVirtual());
    newposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.MoveRequest.newPosition)
  return newposition_;
}
inline void MoveRequest::set_allocated_newposition(::Proto::Position* newposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete newposition_;
  }
  if (newposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      newposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, newposition, submessage_arena);
    }
    
  } else {
    
  }
  newposition_ = newposition;
  // @@protoc_insertion_point(field_set_allocated:Proto.MoveRequest.newPosition)
}

// -------------------------------------------------------------------

// LastMoveInfo

// .Proto.Position oldPosition = 1;
inline bool LastMoveInfo::has_oldposition() const {
  return this != internal_default_instance() && oldposition_ != NULL;
}
inline void LastMoveInfo::clear_oldposition() {
  if (GetArenaNoVirtual() == NULL && oldposition_ != NULL) {
    delete oldposition_;
  }
  oldposition_ = NULL;
}
inline const ::Proto::Position& LastMoveInfo::_internal_oldposition() const {
  return *oldposition_;
}
inline const ::Proto::Position& LastMoveInfo::oldposition() const {
  const ::Proto::Position* p = oldposition_;
  // @@protoc_insertion_point(field_get:Proto.LastMoveInfo.oldPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Position*>(
      &::Proto::_Position_default_instance_);
}
inline ::Proto::Position* LastMoveInfo::release_oldposition() {
  // @@protoc_insertion_point(field_release:Proto.LastMoveInfo.oldPosition)
  
  ::Proto::Position* temp = oldposition_;
  oldposition_ = NULL;
  return temp;
}
inline ::Proto::Position* LastMoveInfo::mutable_oldposition() {
  
  if (oldposition_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::Position>(GetArenaNoVirtual());
    oldposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.LastMoveInfo.oldPosition)
  return oldposition_;
}
inline void LastMoveInfo::set_allocated_oldposition(::Proto::Position* oldposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete oldposition_;
  }
  if (oldposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      oldposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oldposition, submessage_arena);
    }
    
  } else {
    
  }
  oldposition_ = oldposition;
  // @@protoc_insertion_point(field_set_allocated:Proto.LastMoveInfo.oldPosition)
}

// .Proto.Position newPosition = 2;
inline bool LastMoveInfo::has_newposition() const {
  return this != internal_default_instance() && newposition_ != NULL;
}
inline void LastMoveInfo::clear_newposition() {
  if (GetArenaNoVirtual() == NULL && newposition_ != NULL) {
    delete newposition_;
  }
  newposition_ = NULL;
}
inline const ::Proto::Position& LastMoveInfo::_internal_newposition() const {
  return *newposition_;
}
inline const ::Proto::Position& LastMoveInfo::newposition() const {
  const ::Proto::Position* p = newposition_;
  // @@protoc_insertion_point(field_get:Proto.LastMoveInfo.newPosition)
  return p != NULL ? *p : *reinterpret_cast<const ::Proto::Position*>(
      &::Proto::_Position_default_instance_);
}
inline ::Proto::Position* LastMoveInfo::release_newposition() {
  // @@protoc_insertion_point(field_release:Proto.LastMoveInfo.newPosition)
  
  ::Proto::Position* temp = newposition_;
  newposition_ = NULL;
  return temp;
}
inline ::Proto::Position* LastMoveInfo::mutable_newposition() {
  
  if (newposition_ == NULL) {
    auto* p = CreateMaybeMessage<::Proto::Position>(GetArenaNoVirtual());
    newposition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.LastMoveInfo.newPosition)
  return newposition_;
}
inline void LastMoveInfo::set_allocated_newposition(::Proto::Position* newposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete newposition_;
  }
  if (newposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      newposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, newposition, submessage_arena);
    }
    
  } else {
    
  }
  newposition_ = newposition;
  // @@protoc_insertion_point(field_set_allocated:Proto.LastMoveInfo.newPosition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Proto::PlayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::PlayerType>() {
  return ::Proto::PlayerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ChessServerTypes_2eproto
